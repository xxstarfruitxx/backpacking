using FreneticUtilities.FreneticExtensions;
using Newtonsoft.Json.Linq;
using StableUI.Accounts;
using StableUI.Backends;
using StableUI.Core;
using StableUI.DataHolders;
using StableUI.Text2Image;
using StableUI.Utils;
using StableUI.WebAPI;
using System;

namespace StableUI.Builtin_GridGeneratorExtension;

/// <summary>Extension that adds a tool to generate grids of images.</summary>
public class GridGeneratorExtension : Extension
{
    public override void OnInit()
    {
        API.RegisterAPICall(GridGenListModes);
        API.RegisterAPICall(GridGenRun);
        ScriptFiles.Add("Assets/grid_gen.js");
        StyleSheetFiles.Add("Assets/grid_gen.css");
        GridGenCore.ASSETS_DIR = $"{FilePath}/Assets";
        GridGenCore.EXTRA_FOOTER = $"Images area auto-generated by an AI (Stable Diffusion) and so may not have been reviewed by the page author before publishing.\n<script src=\"stableui_gridgen_local.js?vary={Utilities.VaryID}\"></script>";
        GridGenCore.EXTRA_ASSETS.Add("stableui_gridgen_local.js");
        GridGenCore.RegisterMode(new GridGenCore.GridMode("Prompt", true, GridGenCore.GridModeType.TEXT, (s, p) => p.Prompt = s));
        GridGenCore.RegisterMode(new GridGenCore.GridMode("Prompt Replace", true, GridGenCore.GridModeType.TEXT, (s, p) => throw new Exception("Prompt replace mishandled!")));
        GridGenCore.RegisterMode(new GridGenCore.GridMode("Negative Prompt", true, GridGenCore.GridModeType.TEXT, (s, p) => p.NegativePrompt = s));
        GridGenCore.RegisterMode(new GridGenCore.GridMode("Steps", true, GridGenCore.GridModeType.INTEGER, (s, p) => p.Steps = int.Parse(s)));
        GridGenCore.RegisterMode(new GridGenCore.GridMode("Seed", true, GridGenCore.GridModeType.INTEGER, (s, p) => p.Seed = int.Parse(s)));
        GridGenCore.RegisterMode(new GridGenCore.GridMode("CFG Scale", true, GridGenCore.GridModeType.DECIMAL, (s, p) => p.CFGScale = float.Parse(s)));
        GridGenCore.RegisterMode(new GridGenCore.GridMode("Width", true, GridGenCore.GridModeType.INTEGER, (s, p) => p.Width = int.Parse(s)));
        GridGenCore.RegisterMode(new GridGenCore.GridMode("Height", true, GridGenCore.GridModeType.INTEGER, (s, p) => p.Height = int.Parse(s)));
        GridGenCore.RegisterMode(new GridGenCore.GridMode("Model", true, GridGenCore.GridModeType.TEXT, (s, p) => p.ExternalData = new T2IExtra() { Model = Program.T2IModels.Models[s] }, GetValues: () => Program.T2IModels.Models.Keys.ToList()));
        GridGenCore.GridCallInitHook = (call) =>
        {
            call.LocalData = new GridCallData();
        };
        GridGenCore.GridCallParamAddHook = (call, param, val) =>
        {
            if (call.Grid.MinWidth == 0)
            {
                call.Grid.MinWidth = call.Grid.InitialParams.Width;
            }
            if (call.Grid.MinHeight == 0)
            {
                call.Grid.MinHeight = call.Grid.InitialParams.Height;
            }
            string cleaned = GridGenCore.CleanMode(param);
            if (cleaned == "promptreplace")
            {
                (call.LocalData as GridCallData).Replacements.Add(val);
                return true;
            }
            else if (cleaned == "width" || cleaned == "outwidth")
            {
                call.Grid.MinWidth = Math.Min(call.Grid.MinWidth, int.Parse(val));
            }
            else if (cleaned == "height" || cleaned == "outheight")
            {
                call.Grid.MinHeight = Math.Min(call.Grid.MinHeight, int.Parse(val));
            }
            return false;
        };
        GridGenCore.GridCallApplyHook = (call, param, dry) =>
        {
            foreach (string replacement in (call.LocalData as GridCallData).Replacements)
            {
                string[] parts = replacement.Split('=', 2);
                string key = parts[0].Trim();
                string val = parts[1].Trim();
                param.Prompt = param.Prompt.Replace(key, val);
                param.NegativePrompt = param.NegativePrompt.Replace(key, val);
            }
        };
        GridGenCore.GridRunnerPreRunHook = (runner) =>
        {
            // TODO: Progress update
        };
        GridGenCore.GridRunnerPreDryHook = (runner) =>
        {
            // Nothing to do.
        };
        GridGenCore.GridRunnerPostDryHook = (runner, param, set) =>
        {
            if (param.Seed == -1)
            {
                param.Seed = Random.Shared.Next();
            }
            // TODO: subseed
            StableUIGridData data = runner.Grid.LocalData as StableUIGridData;
            // TODO: Generate image
            data.Rendering.RemoveAll(x => x.IsCompleted);
            if (data.Rendering.Count > data.Session.User.Settings.MaxT2ISimultaneous)
            {
                Task.WaitAny(data.Rendering.ToArray());
            }
            if (Volatile.Read(ref data.ErrorOut) is not null)
            {
                throw new InvalidOperationException("Errored");
            }
            T2IParams thisParams = param.Clone();
            data.Rendering.Add(Task.Run(async () =>
            {
                T2IBackendAccess backend;
                try
                {
                    backend = Program.Backends.GetNextT2IBackend(TimeSpan.FromMinutes(2), (thisParams.ExternalData as T2IExtra).Model); // TODO: Max timespan configurable
                }
                catch (InvalidOperationException ex)
                {
                    Volatile.Write(ref data.ErrorOut, new JObject() { ["error"] = $"Invalid operation: {ex.Message}" });
                    return;
                }
                catch (TimeoutException)
                {
                    Volatile.Write(ref data.ErrorOut, new JObject() { ["error"] = "Timeout! All backends are occupied with other tasks." });
                    return;
                }
                using (backend)
                {
                    if (Volatile.Read(ref data.ErrorOut) is not null)
                    {
                        return;
                    }
                    Image[] outputs = await backend.Backend.Generate(thisParams);
                    if (outputs.Length != 1)
                    {
                        Volatile.Write(ref data.ErrorOut, new JObject() { ["error"] = $"Server generated {outputs.Length} images when only expecting 1." });
                        return;
                    }
                    try
                    {
                        string dir = set.Filepath.Replace('\\', '/').BeforeLast('/');
                        if (!Directory.Exists(dir))
                        {
                            Directory.CreateDirectory(dir);
                        }
                        File.WriteAllBytes(set.Filepath + ".png", outputs[0].ImageData);
                    }
                    catch (Exception ex)
                    {
                        Logs.Error($"Grid gen failed to save image: {ex}");
                        Volatile.Write(ref data.ErrorOut, new JObject() { ["error"] = "Server failed to save image to file." });
                        return;
                    }
                }
            }));
        };
    }

    public class GridCallData
    {
        public List<string> Replacements = new();
    }

    public class T2IExtra : IDataHolder
    {
        public T2IModel Model;

        public IDataHolder Clone()
        {
            return MemberwiseClone() as T2IExtra;
        }
    }

    public class StableUIGridData
    {
        public List<Task> Rendering = new();

        public Session Session;

        public JObject ErrorOut;
    }

    public async Task<JObject> GridGenListModes()
    {
        return new JObject()
        {
            ["list"] = JToken.FromObject(GridGenCore.GridModes.Values.Select(v => v.ToNet()).ToList())
        };
    }

    // TODO: WebSocket mode probably
    public async Task<JObject> GridGenRun(Session session, T2IParams baseParams, JObject raw, string outputFolderName, bool doOverwrite, bool fastSkip, bool generatePage, bool publishGenMetadata, bool dryRun, string wanted_model = null)
    {
        T2IModel targetModel = null;
        if (wanted_model is not null && !Program.T2IModels.Models.TryGetValue(wanted_model, out targetModel))
        {
            return new JObject() { ["error"] = "Invalid model name" };
        }
        baseParams.ExternalData = new T2IExtra() {  Model = targetModel };
        if (outputFolderName.Trim() == "")
        {
            return new JObject() { ["error"] = "Output folder name cannot be empty." };
        }
        StableUIGridData data = new() { Session = session };
        try
        {
            GridGenCore.Run(baseParams, raw["gridAxes"], data, null, session.User.OutputDirectory, outputFolderName, doOverwrite, fastSkip, generatePage, publishGenMetadata, dryRun);
            await Task.WhenAll(data.Rendering);
        }
        catch (InvalidDataException ex)
        {
            return new JObject() { ["error"] = $"Failed due to error: {ex.Message}" };
        }
        catch (Exception ex)
        {
            JObject err2 = Volatile.Read(ref data.ErrorOut);
            if (err2 is not null)
            {
                return err2;
            }
            Logs.Error($"GridGen failed: {ex}");
            return new JObject() { ["error"] = "Failed due to internal error." };
        }
        JObject err = Volatile.Read(ref data.ErrorOut);
        if (err is not null)
        {
            return err;
        }
        return new JObject() { ["success"] = true };
    }
}
